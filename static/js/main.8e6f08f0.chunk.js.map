{"version":3,"sources":["views/leaflef-map.js","views/google-map.js","components/header.js","index.js"],"names":["LeafletMap","_React$useState","React","useState","_React$useState2","Object","slicedToArray","latitude","setLatitude","_React$useState3","_React$useState4","longitude","setLongitude","useEffect","watchId","navigator","geolocation","watchPosition","_ref","coords","clearWatch","react_default","a","createElement","Map","center","zoom","TileLayer","url","attribution","Marker","position","Container","props","_this","classCallCheck","this","_this$props$initialCe","possibleConstructorReturn","getPrototypeOf","call","initialCenter","lat","lng","state","currentLocation","_this2","centerAroundCurrentLocation","pos","console","log","setState","loadMap","prevProps","prevState","google","maps","mapRef","refs","map","node","ReactDOM","findDOMNode","_this$props","_this$state$currentLo","LatLng","mapConfig","assign","style","width","height","ref","Component","defaultProps","GoogleApiWrapper","apiKey","ActiveLink","es","getProps","className","isCurrent","Header","to","$root","document","getElementById","render","leaflef_map","path","google_map","header"],"mappings":"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","file":"static/js/main.8e6f08f0.chunk.js","sourcesContent":["import React from \"react\";\nimport { Map, TileLayer, Marker } from \"react-leaflet\";\n\nfunction LeafletMap() {\n  const [latitude, setLatitude] = React.useState(0);\n  const [longitude, setLongitude] = React.useState(0);\n\n  React.useEffect(() => {\n    const watchId = navigator.geolocation.watchPosition(({ coords }) => {\n      setLatitude(coords.latitude);\n      setLongitude(coords.longitude);\n    });\n\n    return () => navigator.geolocation.clearWatch(watchId);\n  }, [setLatitude, setLongitude]);\n\n  return (\n    <Map center={[latitude, longitude]} zoom={15}>\n      <TileLayer\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors | Made for Codeable'\n      />\n      <Marker position={[latitude, longitude]} />\n    </Map>\n  );\n}\n\nexport default LeafletMap;\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Map, Marker, GoogleApiWrapper, InfoWindow } from \"google-maps-react\";\nclass Container extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const { lat, lng } = this.props.initialCenter;\n    this.state = {\n      currentLocation: {\n        lat: lat,\n        lng: lng\n      }\n    };\n  }\n  componentDidMount() {\n    if (this.props.centerAroundCurrentLocation) {\n      if (navigator && navigator.geolocation) {\n        const watchID = navigator.geolocation.watchPosition(pos => {\n          const coords = pos.coords;\n          console.log(coords);\n          this.setState({\n            currentLocation: {\n              lat: coords.latitude,\n              lng: coords.longitude\n            }\n          });\n          this.loadMap();\n        });\n      }\n    }\n    this.loadMap();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.google !== this.props.google) {\n      this.loadMap();\n    }\n  }\n\n  loadMap() {\n    if (this.props && this.props.google) {\n      // google is available\n      const { google } = this.props;\n      const maps = google.maps;\n\n      const mapRef = this.refs.map;\n      const node = ReactDOM.findDOMNode(mapRef);\n\n      let { initialCenter, zoom } = this.props;\n      const { lat, lng } = this.state.currentLocation;\n\n      const center = new maps.LatLng(lat, lng);\n      const mapConfig = Object.assign(\n        {},\n        {\n          center: center,\n          zoom: zoom\n        }\n      );\n      this.map = new maps.Map(node, mapConfig);\n    }\n    // ...\n  }\n\n  render() {\n    const style = {\n      width: \"100vw\",\n      height: \"100vh\"\n    };\n    return <div style={style} ref=\"map\" />;\n  }\n}\n\nContainer.defaultProps = {\n  zoom: 13,\n  // San Francisco, by default\n  initialCenter: {\n    lat: 37.774929,\n    lng: -122.419416\n  },\n  centerAroundCurrentLocation: true\n};\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyDUGEuJkyJyI45iy3uslI6PUcRw2-CdZQg\"\n})(Container);\n","import React from \"react\";\nimport { Link } from \"@reach/router\";\n\nfunction ActiveLink(props) {\n  function getProps({ isCurrent }) {\n    return {\n      className: isCurrent ? \"active\" : \"\"\n    };\n  }\n\n  return <Link {...props} getProps={getProps} />;\n}\n\nfunction Header() {\n  return (\n    <header>\n      <ul>\n        <li>\n          <ActiveLink to=\"/\">Leaflet</ActiveLink>\n        </li>\n        <li>\n          <ActiveLink to=\"/google-map\">Google Map</ActiveLink>\n        </li>\n      </ul>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Router } from \"@reach/router\";\nimport LeaflefMap from \"./views/leaflef-map\";\nimport GoogleMap from \"./views/google-map\";\nimport Header from \"./components/header\";\nimport \"./main.css\";\n\nfunction App() {\n  return (\n    <main>\n      <Router>\n        <LeaflefMap path=\"/\" />\n        <GoogleMap path=\"/google-map\" />\n      </Router>\n      <Header />\n    </main>\n  );\n}\n\nconst $root = document.getElementById(\"root\");\n\nrender(<App />, $root);\n"],"sourceRoot":""}